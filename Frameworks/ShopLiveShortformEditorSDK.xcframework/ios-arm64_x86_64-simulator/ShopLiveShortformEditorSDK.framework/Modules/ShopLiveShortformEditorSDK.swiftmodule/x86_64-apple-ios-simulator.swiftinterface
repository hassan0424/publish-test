// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShopLiveShortformEditorSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import AssetsLibrary
import DeveloperToolsSupport
import Foundation
import GLKit
import MetalKit
import MobileCoreServices
import Photos
import PhotosUI
import ShopliveFilterSDK
import ShopliveSDKCommon
import Swift
import SwiftUI
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import ffmpegkit
public enum ShopLiveShortformEditorSDKAsset {
  public static let slArrow: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slBackArrow: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slCamera: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slCloseButton: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slClosebutton: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slEditorHandleLeft: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slEditorHandleRight: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slEditorPlayButton: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcCrop: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcDownarrow: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcEditMute: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcEditUnmute: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcFilter: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcHotAirBallon: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcMediaFilled: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcPause: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcPerson: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcPlay: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcShopliveLogo: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slIcSpeedometer: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slInsertPhotoMaterial: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slPlaybar: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slPlaypreview: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slPopArrow: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
  public static let slTimeSliderThumb: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages
}
public struct ShopLiveShortformEditorSDKImages {
  public var name: Swift.String {
    get
  }
  public typealias Image = UIKit.UIImage
  public var image: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages.Image {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public var swiftUIImage: SwiftUI.Image {
    get
  }
}
extension UIKit.UIImage {
  @available(macOS, deprecated, message: "This initializer is unsafe on macOS, please use the ShopLiveShortformEditorSDKImages.image property")
  convenience public init?(asset: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages)
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
extension SwiftUI.Image {
  public init(asset: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages)
  public init(asset: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages, label: SwiftUI.Text)
  public init(decorative asset: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages)
}
@_inheritsConvenienceInitializers @objc public class ShopLiveShortformEditorSDKResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum ShopLiveShortformEditorSDKStrings {
  public enum Alert {
    public static let no: Swift.String
    public static let yes: Swift.String
    public enum Permission {
      public enum Denied {
        public static let cancel: Swift.String
        public static let description: Swift.String
        public static let setting: Swift.String
        public static let title: Swift.String
      }
    }
  }
  public enum Editor {
    public enum Crop {
      public enum Btn {
        public enum Confirm {
          public static let title: Swift.String
        }
      }
      public enum Page {
        public static let title: Swift.String
      }
    }
    public enum Encoding {
      public enum Cancel {
        public enum Alert {
          public static let title: Swift.String
        }
      }
    }
    public enum Filter {
      public enum Btn {
        public enum Confirm {
          public static let title: Swift.String
        }
      }
      public enum Page {
        public static let title: Swift.String
      }
    }
    public enum Main {
      public enum Btn {
        public enum Next {
          public static let title: Swift.String
        }
      }
      public enum Page {
        public static let title: Swift.String
      }
    }
    public enum Next {
      public static let title: Swift.String
    }
    public enum Page {
      public static let title: Swift.String
    }
    public enum Photopicker {
      public enum Btn {
        public enum Recent {
          public static let title: Swift.String
        }
      }
    }
    public enum Speed {
      public enum Btn {
        public enum Confirm {
          public static let title: Swift.String
        }
      }
      public enum Caution {
        public enum Duration {
          public static func limit(_ p1: Swift.Int) -> Swift.String
        }
      }
      public enum Duration {
        public static func label(_ p1: Swift.Int) -> Swift.String
      }
      public enum Page {
        public static let title: Swift.String
      }
    }
    public enum Thumbnail {
      public enum Btn {
        public enum CameraRoll {
          public static let title: Swift.String
        }
        public enum Confirm {
          public static let title: Swift.String
        }
      }
      public enum Page {
        public static let title: Swift.String
      }
      public enum Toast {
        public static let title: Swift.String
        public enum Btn {
          public enum Close {
            public static let title: Swift.String
          }
          public enum Confirm {
            public static let title: Swift.String
          }
        }
        public enum Upload {
          public enum Cancel {
            public static let label: Swift.String
          }
        }
      }
    }
    public enum Time {
      public enum Gap {
        public enum Min {
          public enum Sec {
            public static func label(_ p1: Swift.Int, _ p2: Swift.Int) -> Swift.String
          }
        }
        public enum Sec {
          public static func label(_ p1: Swift.Int) -> Swift.String
        }
      }
    }
    public enum Upload {
      public enum Cancel {
        public enum Alert {
          public static let title: Swift.String
        }
      }
    }
    public enum Volume {
      public enum Btn {
        public enum Confirm {
          public static let title: Swift.String
        }
      }
      public enum Page {
        public static let title: Swift.String
      }
    }
  }
  public enum Loading {
    public enum Inprocessing {
      public static let title: Swift.String
    }
    public enum Preparing {
      public static let title: Swift.String
    }
  }
  public enum Picker {
    public enum Warning {
      public enum Duration {
        public enum Min {
          public static let title: Swift.String
        }
      }
    }
  }
  public enum Toast {
    public enum Cancel {
      public enum Encoding {
        public static let title: Swift.String
      }
      public enum Uploading {
        public static let title: Swift.String
      }
    }
    public enum Codec {
      public static let notvalid: Swift.String
    }
    public enum Uploadinfo {
      public static let emptyVideoTitle: Swift.String
    }
  }
  public enum Uploadinfo {
    public enum Description {
      public static let placeholder: Swift.String
      public static let title: Swift.String
    }
    public enum Page {
      public static let title: Swift.String
    }
    public enum Tag {
      public static let placeholder: Swift.String
      public static let title: Swift.String
    }
    public enum Title {
      public static let placeholder: Swift.String
      public static let title: Swift.String
    }
    public enum Upload {
      public static let title: Swift.String
    }
  }
  public enum Video {
    public enum Frame {
      public enum Slider {
        public enum Minute {
          public enum Seconds {
            public static func label(_ p1: Swift.Int, _ p2: Swift.Int) -> Swift.String
          }
        }
        public enum Seconds {
          public static func label(_ p1: Swift.Int) -> Swift.String
        }
      }
    }
  }
}
@_hasMissingDesignatedInitializers public class ShortFormUploadConfigurationInfosManager {
  public static let shared: ShopLiveShortformEditorSDK.ShortFormUploadConfigurationInfosManager
  public func getBaseUrl() -> Swift.String
  @objc deinit
}
public struct BrandModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ShortsModel : ShopliveSDKCommon.ShopLiveBaseResponsable, Swift.Equatable {
  public var _s: Swift.Int?
  public var _e: Swift.String?
  public var _d: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: ShopLiveShortformEditorSDK.ShortsModel, rhs: ShopLiveShortformEditorSDK.ShortsModel) -> Swift.Bool
  public var validate: Swift.Bool {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public protocol ShopLiveShortformEditorDelegate {
  @objc optional func onShopLiveShortformEditorError(error: ShopliveSDKCommon.ShopLiveCommonError)
  @objc optional func onShopLiveShortformEditorUploadSuccess()
  @objc optional func onShopLiveShortformEditorClosed()
}
@objc public protocol ShopLiveVideoEditorDelegate {
  @objc optional func onShopLiveVideoEditorError(error: ShopliveSDKCommon.ShopLiveCommonError)
  @objc optional func onShopLiveVideoEditorSuccess(videoPath: Swift.String)
  @objc optional func onShopLiveVideoEditorClosed()
}
@_hasMissingDesignatedInitializers public class EditorCropConfig {
  public static let global: ShopLiveShortformEditorSDK.EditorCropConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EditorFilterConfig {
  public static let global: ShopLiveShortformEditorSDK.EditorFilterConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EditorMainConfig {
  public static let global: ShopLiveShortformEditorSDK.EditorMainConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EditorSpeedConfig {
  public static let global: ShopLiveShortformEditorSDK.EditorSpeedConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EditorThumbnailConfig {
  public static let global: ShopLiveShortformEditorSDK.EditorThumbnailConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EditorVolumeConfig {
  public static let global: ShopLiveShortformEditorSDK.EditorVolumeConfig
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MediaPickerConfig {
  public static let global: ShopLiveShortformEditorSDK.MediaPickerConfig
  @objc deinit
}
final public class ShopLiveShortFormEditorAspectRatio {
  final public var width: Swift.Int
  final public var height: Swift.Int
  final public var isFixed: Swift.Bool
  public init(width: Swift.Int = 9, height: Swift.Int = 16, isFixed: Swift.Bool = true)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ShopLiveShortFormEditorTrimOption {
  final public var maxVideoDuration: CoreFoundation.CGFloat
  final public var minVideoDuration: CoreFoundation.CGFloat
  @objc deinit
}
final public class ShopLiveShortFormEditorVisibleContent {
  final public var isDescriptionVisible: Swift.Bool
  final public var isTagsVisible: Swift.Bool
  public init(isDescriptionVisible: Swift.Bool = true, isTagsVisible: Swift.Bool = true)
  @objc deinit
}
final public class ShopLiveShortformEditorConfiguration {
  final public var videoCropOption: ShopLiveShortformEditorSDK.ShopLiveShortFormEditorAspectRatio
  final public var visibleContents: ShopLiveShortformEditorSDK.ShopLiveShortFormEditorVisibleContent
  final public var videoTrimOption: ShopLiveShortformEditorSDK.ShopLiveShortFormEditorTrimOption
  public init(videoCropOption: ShopLiveShortformEditorSDK.ShopLiveShortFormEditorAspectRatio, visibleContents: ShopLiveShortformEditorSDK.ShopLiveShortFormEditorVisibleContent?, minVideoDuration: CoreFoundation.CGFloat? = nil, maxVideoDuration: CoreFoundation.CGFloat? = nil)
  @objc deinit
}
final public class ShopliveVideoEditorAspectRatio {
  final public var width: Swift.Int
  final public var height: Swift.Int
  final public var isFixed: Swift.Bool
  public init(width: Swift.Int = 9, height: Swift.Int = 16, isFixed: Swift.Bool = true)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ShopliveVideoEditorTrimOption {
  final public var maxVideoDuration: CoreFoundation.CGFloat
  final public var minVideoDuration: CoreFoundation.CGFloat
  @objc deinit
}
final public class ShopliveVideoEditorConfiguration {
  final public var videoCropOption: ShopLiveShortformEditorSDK.ShopliveVideoEditorAspectRatio
  final public var videoTrimOption: ShopLiveShortformEditorSDK.ShopliveVideoEditorTrimOption
  public init(videoCropOption: ShopLiveShortformEditorSDK.ShopliveVideoEditorAspectRatio, minVideoDuration: CoreFoundation.CGFloat? = nil, maxVideoDuration: CoreFoundation.CGFloat? = nil)
  @objc deinit
}
public class ShopLiveShortformEditor {
  public static var sdkVersion: Swift.String
  public static let shared: ShopLiveShortformEditorSDK.ShopLiveShortformEditor
  public init()
  @discardableResult
  public func setPermissionHandler(_ permissionHandler: (any ShopliveSDKCommon.ShopLivePermissionHandler)?) -> Self
  @discardableResult
  public func setConfiguration(_ configuration: ShopLiveShortformEditorSDK.ShopLiveShortformEditorConfiguration?) -> Self
  @discardableResult
  public func setDelegate(delegate: any ShopLiveShortformEditorSDK.ShopLiveShortformEditorDelegate) -> Self
  public func start(_ vc: UIKit.UIViewController)
  public func close()
  @objc deinit
}
public class ShopliveVideoEditor {
  public static let shared: ShopLiveShortformEditorSDK.ShopliveVideoEditor
  public init()
  public static var sdkVersion: Swift.String
  @discardableResult
  public func setPermissionHandler(_ permissionHandler: (any ShopliveSDKCommon.ShopLivePermissionHandler)?) -> Self
  @discardableResult
  public func setConfiguration(_ configuration: ShopLiveShortformEditorSDK.ShopliveVideoEditorConfiguration?) -> Self
  @discardableResult
  public func setDelegate(_ delegate: any ShopLiveShortformEditorSDK.ShopLiveVideoEditorDelegate) -> Self
  public func start(_ vc: UIKit.UIViewController)
  public func start(_ vc: UIKit.UIViewController, videoPath: Swift.String)
  public func close()
  @objc deinit
}
public class ShortsVideo {
  public var videoUrl: Foundation.URL
  public var player: AVFoundation.AVPlayer?
  public init(videoUrl: Foundation.URL)
  @objc deinit
  public func getVideoDuration() -> Swift.Double
  public func getVideoSize() -> CoreFoundation.CGSize?
}
public struct SLPhotosPickerConfigure {
  public var customLocalizedTitle: [Swift.String : Swift.String]
  public var tapHereToChange: Swift.String
  public var cancelTitle: Swift.String
  public var doneTitle: Swift.String
  public var emptyMessage: Swift.String
  public var selectMessage: Swift.String
  public var deselectMessage: Swift.String
  public var emptyImage: UIKit.UIImage?
  public var usedCameraButton: Swift.Bool
  public var defaultToFrontFacingCamera: Swift.Bool
  public var usedPrefetch: Swift.Bool
  public var allowedVideo: Swift.Bool
  public var allowedAlbumCloudShared: Swift.Bool
  public var allowedVideoRecording: Swift.Bool
  public var recordingVideoQuality: UIKit.UIImagePickerController.QualityType
  public var maxVideoDuration: Foundation.TimeInterval?
  public var preventAutomaticLimitedAccessAlert: Swift.Bool
  public var mediaType: Photos.PHAssetMediaType?
  public var numberOfColumn: Swift.Int
  public var minimumLineSpacing: CoreFoundation.CGFloat
  public var minimumInteritemSpacing: CoreFoundation.CGFloat
  public var singleSelectedMode: Swift.Bool
  public var singleSelectedDismiss: Swift.Bool
  public var maxSelectedAssets: Swift.Int?
  public var fetchOption: Photos.PHFetchOptions?
  public var fetchCollectionOption: [ShopLiveShortformEditorSDK.FetchCollectionType : Photos.PHFetchOptions]
  public var selectedColor: UIKit.UIColor
  public var cameraBgColor: UIKit.UIColor
  public var cameraIcon: ShopLiveShortformEditorSDK.ShopLiveShortformEditorSDKImages.Image
  public var groupByFetch: ShopLiveShortformEditorSDK.PHFetchedResultGroupedBy?
  public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask
  public init()
}
public enum SLPhotosPickerPopupConfigure {
  case animation(Foundation.TimeInterval)
}
public enum FetchCollectionType {
  case assetCollections(Photos.PHAssetCollectionType)
  case topLevelUserCollections
}
extension ShopLiveShortformEditorSDK.FetchCollectionType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ShopLiveShortformEditorSDK.FetchCollectionType, b: ShopLiveShortformEditorSDK.FetchCollectionType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum SLPHFetchedResultGroupedBy {
  case year
  case month
  case week
  case day
  case hour
  case custom(dateFormat: Swift.String)
}
public enum PHFetchedResultGroupedBy {
  case year
  case month
  case week
  case day
  case hour
  case custom(dateFormat: Swift.String)
}
public struct SLPHAsset {
  public enum AssetType {
    case photo, video, livePhoto
    public static func == (a: ShopLiveShortformEditorSDK.SLPHAsset.AssetType, b: ShopLiveShortformEditorSDK.SLPHAsset.AssetType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ImageExtType : Swift.String {
    case png, jpg, gif, heic
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var phAsset: Photos.PHAsset?
  public var isSelectedFromCamera: Swift.Bool
  public var selectedOrder: Swift.Int
  public var type: ShopLiveShortformEditorSDK.SLPHAsset.AssetType {
    get
  }
  public var fullResolutionImage: UIKit.UIImage? {
    get
  }
  public func extType(defaultExt: ShopLiveShortformEditorSDK.SLPHAsset.ImageExtType = .png) -> ShopLiveShortformEditorSDK.SLPHAsset.ImageExtType
  @discardableResult
  public func cloudImageDownload(progressBlock: @escaping (Swift.Double) -> Swift.Void, completionBlock: @escaping (UIKit.UIImage?) -> Swift.Void) -> Photos.PHImageRequestID?
  public var originalFileName: Swift.String? {
    get
  }
  public func photoSize(options: Photos.PHImageRequestOptions? = nil, completion: @escaping ((Swift.Int) -> Swift.Void), livePhotoVideoSize: Swift.Bool = false)
  public func videoSize(options: Photos.PHVideoRequestOptions? = nil, completion: @escaping ((Swift.Int) -> Swift.Void))
  @discardableResult
  public func tempCopyMediaFile(videoRequestOptions: Photos.PHVideoRequestOptions? = nil, imageRequestOptions: Photos.PHImageRequestOptions? = nil, livePhotoRequestOptions: Photos.PHLivePhotoRequestOptions? = nil, exportPreset: Swift.String = AVAssetExportPresetHighestQuality, convertLivePhotosToJPG: Swift.Bool = false, progressBlock: ((Swift.Double) -> Swift.Void)? = nil, completionBlock: @escaping ((Foundation.URL, Swift.String) -> Swift.Void)) -> Photos.PHImageRequestID?
  public func exportVideoFile(options: Photos.PHVideoRequestOptions? = nil, outputURL: Foundation.URL? = nil, outputFileType: AVFoundation.AVFileType = .mov, progressBlock: ((Swift.Double) -> Swift.Void)? = nil, completionBlock: @escaping ((Foundation.URL, Swift.String) -> Swift.Void))
  public static func asset(with localIdentifier: Swift.String) -> ShopLiveShortformEditorSDK.SLPHAsset?
}
extension ShopLiveShortformEditorSDK.SLPHAsset : Swift.Equatable {
  public static func == (lhs: ShopLiveShortformEditorSDK.SLPHAsset, rhs: ShopLiveShortformEditorSDK.SLPHAsset) -> Swift.Bool
}
public struct SLAssetsCollection {
  public var sections: [(title: Swift.String, assets: [ShopLiveShortformEditorSDK.SLPHAsset])]?
}
public protocol SLPhotopickerDataSourcesProtocol {
  func headerReferenceSize() -> CoreFoundation.CGSize
  func footerReferenceSize() -> CoreFoundation.CGSize
  func registerSupplementView(collectionView: UIKit.UICollectionView)
  func supplementIdentifier(kind: Swift.String) -> Swift.String
  func configure(supplement view: UIKit.UICollectionReusableView, section: (title: Swift.String, assets: [ShopLiveShortformEditorSDK.SLPHAsset]))
}
@_hasMissingDesignatedInitializers public class SLSynchronizedDictionary<K, V> where K : Swift.Hashable {
  @objc deinit
  public func removeAll()
  public func removeValue(forKey: K)
  public func forEach(_ closure: ((K, V) -> Swift.Void))
  public subscript(key: K) -> V? {
    get
    set
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class SLBackspaceDetectingTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) open var onDeleteBackwards: (() -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func deleteBackward()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func paste(_ sender: Any?)
  @objc deinit
}
public struct SLWSTag : Swift.Hashable {
  public let text: Swift.String
  public let context: Swift.AnyHashable?
  public init(_ text: Swift.String, context: Swift.AnyHashable? = nil)
  public func equals(_ other: ShopLiveShortformEditorSDK.SLWSTag) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public func == (lhs: ShopLiveShortformEditorSDK.SLWSTag, rhs: ShopLiveShortformEditorSDK.SLWSTag) -> Swift.Bool
@objc @_Concurrency.MainActor(unsafe) open class SLWSTagView : UIKit.UIView, UIKit.UITextInputTraits {
  @_Concurrency.MainActor(unsafe) open var displayText: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var displayDelimiter: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var borderWidth: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var textColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selectedTextColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var selected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc public var autocapitalizationType: UIKit.UITextAutocapitalizationType
  @_Concurrency.MainActor(unsafe) @objc public var autocorrectionType: UIKit.UITextAutocorrectionType
  @_Concurrency.MainActor(unsafe) @objc public var spellCheckingType: UIKit.UITextSpellCheckingType
  @_Concurrency.MainActor(unsafe) @objc public var keyboardType: UIKit.UIKeyboardType
  @_Concurrency.MainActor(unsafe) @objc public var keyboardAppearance: UIKit.UIKeyboardAppearance
  @_Concurrency.MainActor(unsafe) @objc public var returnKeyType: UIKit.UIReturnKeyType
  @_Concurrency.MainActor(unsafe) @objc public var enablesReturnKeyAutomatically: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public var isSecureTextEntry: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(tag: ShopLiveShortformEditorSDK.SLWSTag)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open func sizeToFit(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
extension ShopLiveShortformEditorSDK.SLWSTagView : UIKit.UIKeyInput {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var hasText: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public func insertText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func deleteBackward()
}
public struct SLWSTagAcceptOption : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let `return`: ShopLiveShortformEditorSDK.SLWSTagAcceptOption
  public static let comma: ShopLiveShortformEditorSDK.SLWSTagAcceptOption
  public static let space: ShopLiveShortformEditorSDK.SLWSTagAcceptOption
  public static let sharp: ShopLiveShortformEditorSDK.SLWSTagAcceptOption
  public typealias ArrayLiteralElement = ShopLiveShortformEditorSDK.SLWSTagAcceptOption
  public typealias Element = ShopLiveShortformEditorSDK.SLWSTagAcceptOption
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SLWSTagsField : UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) final public let textField: ShopLiveShortformEditorSDK.SLBackspaceDetectingTextField
  @_Concurrency.MainActor(unsafe) public var isDisplayMode: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak open var textDelegate: (any UIKit.UITextFieldDelegate)?
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var selectedTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var delimiter: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isDelimiterVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shouldTokenizeAfterResigningFirstResponder: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var maxHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var numberOfLines: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var enableScrolling: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var layoutMargins: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "use 'textField.textColor' directly.")
  @_Concurrency.MainActor(unsafe) open var fieldTextColor: UIKit.UIColor? {
    get
    set
  }
  @available(iOS 10.0, *)
  @available(*, deprecated, message: "use 'textField.fieldTextContentType' directly.")
  @_Concurrency.MainActor(unsafe) open var fieldTextContentType: UIKit.UITextContentType! {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderAlwaysVisible: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var keyboardAppearance: UIKit.UIKeyboardAppearance {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var readOnly: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var acceptTagOptions: [ShopLiveShortformEditorSDK.SLWSTagAcceptOption]
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var spaceBetweenTags: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var spaceBetweenLines: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isFirstResponder: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var tags: [ShopLiveShortformEditorSDK.SLWSTag] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var tagViews: [ShopLiveShortformEditorSDK.SLWSTagView]
  @_Concurrency.MainActor(unsafe) open var onShouldAcceptTag: ((ShopLiveShortformEditorSDK.SLWSTagsField) -> Swift.Bool)?
  @_Concurrency.MainActor(unsafe) open var onDidChangeText: ((ShopLiveShortformEditorSDK.SLWSTagsField, _ text: Swift.String?) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidAddTag: ((ShopLiveShortformEditorSDK.SLWSTagsField, _ tag: ShopLiveShortformEditorSDK.SLWSTag) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidRemoveTag: ((ShopLiveShortformEditorSDK.SLWSTagsField, _ tag: ShopLiveShortformEditorSDK.SLWSTag) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidSelectTagView: ((ShopLiveShortformEditorSDK.SLWSTagsField, _ tag: ShopLiveShortformEditorSDK.SLWSTagView) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onDidUnselectTagView: ((ShopLiveShortformEditorSDK.SLWSTagsField, _ tag: ShopLiveShortformEditorSDK.SLWSTagView) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var onValidateTag: ((ShopLiveShortformEditorSDK.SLWSTag, [ShopLiveShortformEditorSDK.SLWSTag]) -> Swift.Bool)?
  @_Concurrency.MainActor(unsafe) open var onVerifyTag: ((ShopLiveShortformEditorSDK.SLWSTagsField, _ text: Swift.String) -> Swift.Bool)?
  @_Concurrency.MainActor(unsafe) open var onDidChangeHeightTo: ((ShopLiveShortformEditorSDK.SLWSTagsField, _ height: CoreFoundation.CGFloat) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) open var useCloseButton: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var preferredMaxLayoutWidth: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open var suggestions: [Swift.String]
  @_Concurrency.MainActor(unsafe) open var caseSensitiveSuggestions: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func setCornerRadius(to cornerRadius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) open func acceptCurrentTextAsTag()
  @_Concurrency.MainActor(unsafe) open var isEditing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open func beginEditing()
  @_Concurrency.MainActor(unsafe) open func endEditing()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func reloadInputViews()
  @_Concurrency.MainActor(unsafe) open func addTags(_ tags: [Swift.String])
  @_Concurrency.MainActor(unsafe) open func addTags(_ tags: [ShopLiveShortformEditorSDK.SLWSTag])
  @_Concurrency.MainActor(unsafe) open func addTag(_ tag: Swift.String)
  @_Concurrency.MainActor(unsafe) open func addTag(_ tag: ShopLiveShortformEditorSDK.SLWSTag)
  @_Concurrency.MainActor(unsafe) open func removeTag(_ tag: Swift.String)
  @_Concurrency.MainActor(unsafe) open func removeTag(_ tag: ShopLiveShortformEditorSDK.SLWSTag)
  @_Concurrency.MainActor(unsafe) open func removeTagAtIndex(_ index: Swift.Int)
  @_Concurrency.MainActor(unsafe) open func removeTags()
  @discardableResult
  @_Concurrency.MainActor(unsafe) open func tokenizeTextFieldText() -> ShopLiveShortformEditorSDK.SLWSTag?
  @objc @_Concurrency.MainActor(unsafe) open func onTextFieldDidChange(_ sender: Swift.AnyObject)
  @_Concurrency.MainActor(unsafe) open func selectNextTag()
  @_Concurrency.MainActor(unsafe) open func selectPrevTag()
  @_Concurrency.MainActor(unsafe) open func selectTagView(_ tagView: ShopLiveShortformEditorSDK.SLWSTagView, animated: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) open func unselectAllTagViewsAnimated(_ animated: Swift.Bool = false)
}
extension ShopLiveShortformEditorSDK.SLWSTagsField {
  @available(*, deprecated, message: "use 'textField.keyboardType' directly.")
  @_Concurrency.MainActor(unsafe) public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.returnKeyType' directly.")
  @_Concurrency.MainActor(unsafe) public var returnKeyType: UIKit.UIReturnKeyType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.spellCheckingType' directly.")
  @_Concurrency.MainActor(unsafe) public var spellCheckingType: UIKit.UITextSpellCheckingType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.autocapitalizationType' directly.")
  @_Concurrency.MainActor(unsafe) public var autocapitalizationType: UIKit.UITextAutocapitalizationType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.autocorrectionType' directly.")
  @_Concurrency.MainActor(unsafe) public var autocorrectionType: UIKit.UITextAutocorrectionType {
    get
    set
  }
  @available(*, deprecated, message: "use 'textField.enablesReturnKeyAutomatically' directly.")
  @_Concurrency.MainActor(unsafe) public var enablesReturnKeyAutomatically: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var text: Swift.String? {
    get
    set
  }
  @available(*, deprecated, message: "Use 'inputFieldAccessoryView' instead")
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var inputAccessoryView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var inputFieldAccessoryView: UIKit.UIView? {
    get
    set
  }
}
extension ShopLiveShortformEditorSDK.SLWSTagsField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension ShopLiveShortformEditorSDK.SLWSTagsField {
  @_Concurrency.MainActor(unsafe) public static func == (lhs: UIKit.UITextField, rhs: ShopLiveShortformEditorSDK.SLWSTagsField) -> Swift.Bool
}
extension ShopLiveShortformEditorSDK.SLWSTagsField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
extension ShopLiveShortformEditorSDK.SLPHAsset.AssetType : Swift.Equatable {}
extension ShopLiveShortformEditorSDK.SLPHAsset.AssetType : Swift.Hashable {}
extension ShopLiveShortformEditorSDK.SLPHAsset.ImageExtType : Swift.Equatable {}
extension ShopLiveShortformEditorSDK.SLPHAsset.ImageExtType : Swift.Hashable {}
extension ShopLiveShortformEditorSDK.SLPHAsset.ImageExtType : Swift.RawRepresentable {}
