// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ShopLiveHLSPlayerSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import DeveloperToolsSupport
import Foundation
import MediaPlayer
import ShopLiveCorePlayerSDK
import ShopliveSDKCommon
import Swift
import SwiftUI
import UIKit
import VideoToolbox
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ShopLiveHLSPlayerSDKAsset {
  public static let closebutton: ShopLiveHLSPlayerSDK.ShopLiveHLSPlayerSDKImages
}
public struct ShopLiveHLSPlayerSDKImages {
  public var name: Swift.String {
    get
  }
  public typealias Image = UIKit.UIImage
  public var image: ShopLiveHLSPlayerSDK.ShopLiveHLSPlayerSDKImages.Image {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public var swiftUIImage: SwiftUI.Image {
    get
  }
}
extension UIKit.UIImage {
  @available(macOS, deprecated, message: "This initializer is unsafe on macOS, please use the ShopLiveHLSPlayerSDKImages.image property")
  convenience public init?(asset: ShopLiveHLSPlayerSDK.ShopLiveHLSPlayerSDKImages)
}
@available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
extension SwiftUI.Image {
  public init(asset: ShopLiveHLSPlayerSDK.ShopLiveHLSPlayerSDKImages)
  public init(asset: ShopLiveHLSPlayerSDK.ShopLiveHLSPlayerSDKImages, label: SwiftUI.Text)
  public init(decorative asset: ShopLiveHLSPlayerSDK.ShopLiveHLSPlayerSDKImages)
}
@_inheritsConvenienceInitializers @objc public class ShopLiveHLSPlayerSDKResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum ShopLiveHLSPlayerSDKStrings {
  public enum Chat {
    public static let placeholder: Swift.String
    public enum Send {
      public static let title: Swift.String
    }
  }
  public enum Share {
    public enum Url {
      public enum Empty {
        public static let error: Swift.String
        public static let message: Swift.String
      }
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ShopLiveHLSPlayerView : UIKit.UIView, ShopLiveCorePlayerSDK.ShopLiveHLSPlayerViewInterface, ShopLiveCorePlayerSDK.ShopLiveRTCPlayerViewInterface {
  @_Concurrency.MainActor(unsafe) public var hlsResultHandler: ((ShopLiveCorePlayerSDK.ShopLiveHLSPlayerViewResult) -> ())?
  @objc deinit
  @_Concurrency.MainActor(unsafe) public var resultHandler: ((ShopLiveCorePlayerSDK.ShopLiveHLSPlayerViewResult) -> ())?
  @_Concurrency.MainActor(unsafe) public func hlsAction(_ action: ShopLiveCorePlayerSDK.ShopLiveHLSPlayerViewAction)
  @_Concurrency.MainActor(unsafe) public func getAVPlayer() -> AVFoundation.AVPlayer?
  @_Concurrency.MainActor(unsafe) public func getPlayerLayer() -> AVFoundation.AVPlayerLayer?
  @_Concurrency.MainActor(unsafe) public var rtcResultHanlder: ((ShopLiveCorePlayerSDK.ShopLiveRTCPlayerViewResult) -> ())?
  @_Concurrency.MainActor(unsafe) public func rtcAction(_ action: ShopLiveCorePlayerSDK.ShopLiveRTCPlayerViewAction)
  @_Concurrency.MainActor(unsafe) public func getOsDisplayLayer() -> AVFoundation.AVSampleBufferDisplayLayer?
  @_Concurrency.MainActor(unsafe) public func getInAppDisplayLayerVideoGravity() -> AVFoundation.AVLayerVideoGravity?
}
@_inheritsConvenienceInitializers @objc public class ShopLiveHLSPlayer : ObjectiveC.NSObject {
  @objc public static var sdkVersion: Swift.String {
    @objc get
  }
  @objc public static func getHLSPlayerView() -> ShopLiveHLSPlayerSDK.ShopLiveHLSPlayerView
  @objc public static func getHLSPlayerViewModel(stateContainer: any ShopLiveCorePlayerSDK.ShopLivePlayerStateContainer) -> ObjectiveC.NSObject
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HLSPlayerViewModel : ShopLiveCorePlayerSDK.ShopLiveBasePlayerViewModel {
  @objc deinit
  override public func onRetryOnNetworkDisConnect()
  override public func onResetCampaignState()
  override public func onSetCampaignStatus(status: ShopLiveCorePlayerSDK.ShopLivePlayerCampaignStatus)
  override public func onSetAVPlayer(player: AVFoundation.AVPlayer?)
  override public func onSetAVPlayerLayer(layer: AVFoundation.AVPlayerLayer?)
  override public func onSetIsReplayMode(isReplayMode: Swift.Bool)
  override public func onSetSoundMuteStateOnWebViewSetConf()
  override public func onSetSoundMute(isMuted: Swift.Bool, needToSendToWeb: Swift.Bool)
  override public func onSetIsLLHLS(isLLHLS: Swift.Bool)
  override public func onSetNeedSeek(needSeek: Swift.Bool)
  override public func onSetNeedReload(needReload: Swift.Bool)
  override public func onSetPreviewURL(url: Foundation.URL?)
  override public func onSetLiveUrl(url: Foundation.URL?)
  override public func onCheckIsLoadingAvailable(isHidden: Swift.Bool)
  override public func onCheckIfSnapShotImageFrameNeedReCalculation()
  override public func onReloadVideo()
  override public func onSeekTo(time: CoreMedia.CMTime)
  override public func onSeekToLatest()
  override public func onDidUpdateVideoUrl(url: Foundation.URL)
  override public func onRequestTakeSnapshot()
  override public func onRequestTakeSnapShotWithCompletion(completion: (() -> ())?)
  override public func onUpdatePlayBackSpeed(rate: Swift.Float)
  override public func onResetRetryFromWebview()
  override public func onResetPlayer()
  override public func onDidStopOsPip()
  override public func onInitPlayer(url: Foundation.URL?)
  override public func onTearDownViewModel()
  override public func onAudioSessionObserverSetIsMuted(isMuted: Swift.Bool)
  override public func getPlayer() -> AVFoundation.AVPlayer?
  override public func getPlayerItem() -> AVFoundation.AVPlayerItem?
  override public func getIsReplayMode() -> Swift.Bool
  override public func getNeedSeek() -> Swift.Bool
  override public func getTimeControlStatus() -> AVFoundation.AVPlayer.TimeControlStatus
  override public func getVideoDuration() -> CoreMedia.CMTime?
  override public func getIsReplayFinished() -> Swift.Bool
}
extension ShopLiveHLSPlayerSDK.HLSPlayerViewModel : AVFoundation.AVPlayerItemMetadataOutputPushDelegate {
  @objc dynamic public func metadataOutput(_ output: AVFoundation.AVPlayerItemMetadataOutput, didOutputTimedMetadataGroups groups: [AVFoundation.AVTimedMetadataGroup], from track: AVFoundation.AVPlayerItemTrack?)
}
